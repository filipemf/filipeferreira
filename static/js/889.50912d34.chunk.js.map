{"version":3,"file":"static/js/889.50912d34.chunk.js","mappings":"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","sources":["../node_modules/typed.js/src/defaults.js","../node_modules/typed.js/src/initializer.js","../node_modules/typed.js/src/html-parser.js","../node_modules/typed.js/src/typed.js","components/Home.jsx"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n    // the order of strings\n    self.sequence = [];\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    this.appendAnimationCss(self);\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendAnimationCss(self) {\n    const cssDataName = 'data-typed-js-css';\n    if (!self.autoInsertCss) {\n      return;\n    }\n    if (!self.showCursor && !self.fadeOut) {\n      return;\n    }\n    if (document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.type = 'text/css';\n    css.setAttribute(cssDataName, true);\n\n    let innerCss = '';\n    if (self.showCursor) {\n      innerCss += `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n    }\n\n    if (self.fadeOut) {\n      innerCss += `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n    }\n    if (css.length === 0) {\n      return;\n    }\n    css.innerHTML = innerCss;\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // Check if there is some text in the element, if yes start by backspacing the default message\n      if (!this.currentElContent || this.currentElContent.length === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        // Start typing\n        this.backspace(this.currentElContent, this.currentElContent.length);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substr(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substr(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substr(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substr(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n","import i18next from 'i18next';\nimport React, {useEffect, useState} from 'react';\nimport { Link } from 'react-scroll';\nimport Typed from 'typed.js';\nimport {AiFillGithub, AiFillLinkedin, AiOutlineWhatsApp} from 'react-icons/ai'\n\nconst Home = () => {\n  const [content, setContent] = useState(i18next.t(\"home.button\"));\n\n  useEffect(()=>{\n    new Typed('.auto-type',{\n      strings: [i18next.t(\"home.titles.title1\"), i18next.t(\"home.titles.title2\"), i18next.t(\"home.titles.title3\")],\n      typeSpeed: 100,\n      backSpeed: 100,\n      loop: true,\n\n    })\n\n\n    const elem = document.querySelector(\".btn\");\n    const beforeElem = window.getComputedStyle(elem, \"::before\");\n\n    // Update the content property of the ::before pseudo-element\n    elem.style.setProperty(\"content\", \"new content\");\n\n    // Log the updated value of the content property\n    console.log(beforeElem.getPropertyValue(\"content\"));\n\n\n\n  }, [])\n\n\n  \n\n  return (\n    <div name='home' id='home' className='w-full h-screen bg-[#22232a]'>\n      {/* Container */}\n      <div className=' mx-auto px-8 flex flex-col justify-center h-full'>\n        \n        <div className='homeContainer flex mt-[100px] justify-center'>\n          <div className='homeText width-[695px]'>\n\n            <h1 className='text-4xl sm:text-5xl font-bold text-[#ccd6f6]'>\n              Filipe Ferreira\n            </h1>\n          \n          <div className='inline-flex'>\n            <h2 className='auto-type'></h2>\n          </div>\n\n          <div className=''>\n\n            <div className='contactDiv'>\n              <a className='averageLink flex justify-between items-center w-full text-gray-300'\n                href='https://github.com/filipemf' target=\"_blank\" rel=\"noreferrer\"\n                >\n                  <AiFillGithub size={30}/>\n              </a>\n            </div>\n\n            <div className='contactDiv'>\n              <a className='averageLink flex justify-between items-center w-full text-gray-300'\n                href='https://www.linkedin.com/in/filipemarquesf/' target=\"_blank\" rel=\"noreferrer\"\n                >\n                  <AiFillLinkedin size={30}/>\n              </a>\n            </div>\n\n            <div className='contactDiv'>\n              <a className='averageLink flex justify-between items-center w-full text-gray-300'\n                href=\"//api.whatsapp.com/send?phone=5511967174160\" target=\"_blank\" rel=\"noreferrer\"\n                >\n                  <AiOutlineWhatsApp size={30}/>\n              </a>\n            </div>\n          </div>\n            \n\n            <p className='text-[#8892b0] py-4 max-w-[700px] text-justify'>\n            {i18next.t(\"home.about\")}\n            </p>\n\n            <div>\n\n\n              <Link className='btn' id='btn' to='about' smooth={true} duration={500} style={{ \"--content\": `\"${content}\"` }}></Link>\n\n            </div>\n\n          </div>\n\n\n\n          <div className='containerPhoto'>\n            <img className='image h-[500px]' src='../assets/foto3compress.png' alt=\"HTML icon\" />\n          </div>\n          \n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["s","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","t","onComplete","preStringTyped","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","e","n","prototype","load","i","el","document","querySelector","options","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","trim","style","cssText","r","Array","slice","apply","children","o","length","a","push","innerHTML","u","strPos","arrayPos","stopNum","curLoop","sequence","pause","status","typewrite","curString","curStrPos","typingComplete","currentElContent","this","getCurrentElContent","appendAnimationCss","value","createElement","type","setAttribute","body","appendChild","typeHtmlChars","substr","charAt","backSpaceHtmlChars","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanizer","test","exec","parseInt","temporaryPause","substring","p","c","doneTyping","keepTyping","setPauseStatus","complete","initFadeOut","add","Math","round","random","sort","className","addEventListener","insertBefore","nextSibling","_useState","useState","i18next","_useState2","_slicedToArray","content","useEffect","Typed","elem","beforeElem","window","getComputedStyle","setProperty","console","log","getPropertyValue","_jsx","name","id","_jsxs","href","target","rel","AiFillGithub","size","AiFillLinkedin","AiOutlineWhatsApp","Link","to","smooth","duration","concat","src","alt"],"sourceRoot":""}