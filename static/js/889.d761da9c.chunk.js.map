{"version":3,"file":"static/js/889.d761da9c.chunk.js","mappings":"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","sources":["../node_modules/typed.js/src/defaults.js","../node_modules/typed.js/src/initializer.js","../node_modules/typed.js/src/html-parser.js","../node_modules/typed.js/src/typed.js","components/Home.jsx"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n    // the order of strings\n    self.sequence = [];\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    this.appendAnimationCss(self);\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendAnimationCss(self) {\n    const cssDataName = 'data-typed-js-css';\n    if (!self.autoInsertCss) {\n      return;\n    }\n    if (!self.showCursor && !self.fadeOut) {\n      return;\n    }\n    if (document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.type = 'text/css';\n    css.setAttribute(cssDataName, true);\n\n    let innerCss = '';\n    if (self.showCursor) {\n      innerCss += `\n        .typed-cursor{\n          opacity: 1;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n    }\n\n    if (self.fadeOut) {\n      innerCss += `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n    }\n    if (css.length === 0) {\n      return;\n    }\n    css.innerHTML = innerCss;\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substr(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // Check if there is some text in the element, if yes start by backspacing the default message\n      if (!this.currentElContent || this.currentElContent.length === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        // Start typing\n        this.backspace(this.currentElContent, this.currentElContent.length);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substr(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substr(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substr(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substr(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n","import i18next from 'i18next';\nimport React, {useEffect, useState} from 'react';\nimport { HiArrowNarrowRight, HiArrowNarrowDown } from 'react-icons/hi';\nimport { Link } from 'react-scroll';\nimport Typed from 'typed.js';\nimport {AiFillGithub, AiFillLinkedin, AiOutlineWhatsApp} from 'react-icons/ai'\n\nconst Home = () => {\n  const [content, setContent] = useState(i18next.t(\"home.button\"));\n\n  useEffect(()=>{\n    new Typed('.auto-type',{\n      strings: [i18next.t(\"home.titles.title1\"), i18next.t(\"home.titles.title2\"), i18next.t(\"home.titles.title3\")],\n      typeSpeed: 100,\n      backSpeed: 100,\n      loop: true,\n\n    })\n\n\n    const elem = document.querySelector(\".btn\");\n    const beforeElem = window.getComputedStyle(elem, \"::before\");\n\n    // Update the content property of the ::before pseudo-element\n    elem.style.setProperty(\"content\", \"new content\");\n\n    // Log the updated value of the content property\n    console.log(beforeElem.getPropertyValue(\"content\"));\n\n\n\n  }, [])\n\n\n  \n\n  return (\n    <div name='home' id='home' className='w-full h-screen bg-[#22232a]'>\n      {/* Container */}\n      <div className=' mx-auto px-8 flex flex-col justify-center h-full'>\n        \n        <div className='homeContainer flex mt-[100px] justify-center'>\n          <div className='homeText width-[695px]'>\n\n            <h1 className='text-4xl sm:text-5xl font-bold text-[#ccd6f6]'>\n              Filipe Ferreira\n            </h1>\n          \n          <div className='inline-flex'>\n            <h2 className='auto-type'></h2>\n          </div>\n\n          <div className=''>\n\n            <div className='contactDiv'>\n              <a className='averageLink flex justify-between items-center w-full text-gray-300'\n                href='https://github.com/filipemf' target=\"_blank\" rel=\"noreferrer\"\n                >\n                  <AiFillGithub size={30}/>\n              </a>\n            </div>\n\n            <div className='contactDiv'>\n              <a className='averageLink flex justify-between items-center w-full text-gray-300'\n                href='https://www.linkedin.com/in/filipemarquesf/' target=\"_blank\" rel=\"noreferrer\"\n                >\n                  <AiFillLinkedin size={30}/>\n              </a>\n            </div>\n\n            <div className='contactDiv'>\n              <a className='averageLink flex justify-between items-center w-full text-gray-300'\n                href=\"//api.whatsapp.com/send?phone=5511967174160\" target=\"_blank\" rel=\"noreferrer\"\n                >\n                  <AiOutlineWhatsApp size={30}/>\n              </a>\n            </div>\n          </div>\n            \n\n            <p className='text-[#8892b0] py-4 max-w-[700px] text-justify'>\n            {i18next.t(\"home.about\")}\n            </p>\n\n            <div>\n\n\n            {/* <button className='knowMore' id='knowMore'>Know More!</button> */}\n              <Link className='btn' id='btn' to='about' smooth={true} duration={500} style={{ \"--content\": `\"${content}\"` }}>Know</Link>\n              {/* <button  className='text-white group border-2 px-6 py-3 my-2 flex items-center'>\n              <Link className='knowMoreText w-[200px] font-bold' to='about' smooth={true} duration={500}>\n                  {i18next.t(\"home.button\")}\n                  <span className='group-hover:rotate-90 duration-300 decoration-none' id='arrow'>\n                    <HiArrowNarrowDown className='ml-3 ' />\n                  </span>\n               </Link>  \n              </button> */}\n            </div>\n\n          </div>\n\n\n\n          <div className='containerPhoto'>\n            <img className='image h-[500px]' src='../assets/foto3png.png' alt=\"HTML icon\" />\n          </div>\n\n          {/* <div className='photoContainer right-0 top-0'>\n            <img className='myPhoto h-[500px]' src={FOTO} alt=\"HTML icon\" />\n          </div> */}\n\n          \n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","initializer","Initializer","prototype","load","options","elementId","el","document","querySelector","_extends","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","s","trim","style","cssText","Array","slice","apply","children","stringsLength","length","i","push","innerHTML","strPos","stopNum","curLoop","sequence","pause","status","typewrite","curString","curStrPos","typingComplete","currentElContent","this","getCurrentElContent","appendAnimationCss","_proto","value","cssDataName","css","createElement","type","setAttribute","innerCss","body","appendChild","htmlParser","HTMLParser","typeHtmlChars","curChar","substr","charAt","endTag","backSpaceHtmlChars","Typed","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","_this","classList","contains","remove","humanize","humanizer","numChars","_this2","pauseTime","test","skip","exec","parseInt","temporaryPause","substring","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","complete","_this3","initFadeOut","_this4","curStringAtPosition","isTyping","isBlinking","add","speed","Math","round","random","sort","className","_this5","str","_this6","addEventListener","e","insertBefore","nextSibling","useState","i18next","content","useEffect","elem","beforeElem","window","getComputedStyle","setProperty","console","log","getPropertyValue","name","id","href","target","rel","size","to","smooth","duration","src","alt"],"sourceRoot":""}